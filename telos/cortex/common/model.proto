syntax = "proto3";

package telos.cortex.common;
option java_package = "com.telos.cortex.common";
option java_multiple_files = true;

import "jio/brain/proto/base/token.proto";
import "telos/cortex/common/api.proto";

message CortexModel {
  jio.brain.proto.base.BrainToken model_id = 1; // generated by IdentityService
  jio.brain.proto.base.BrainToken api_id = 2;
  CortexModelSchema model_schema = 3;
}

/*
CortexModelSchema is define by Data Scientist
 */
message CortexModelSchema {
  CortexModelStatus status = 1;  // Current status of ``model_status``
  CortexModelTag tags = 2; // Tags: Additional metadata key-value pairs for this ``model_version``.
  CortexModelAlgorithm model_algorithm = 3;   // e.g. decision trees, SVM’s, etc.
  CortexModelHyperParameter model_hyper_parameter = 4;
  CortexModelSignature model_signature = 5;
  CortexModelDeploymentUnit deployment_unit = 6;
  CortexModelMetrics metrics = 7;
  int64 created_on = 8; // Timestamp recorded when this ``model_version`` was created.
  int64 last_updated_on = 9; // Timestamp recorded when metadata for this ``model_version`` was last updated.
}

// This is a function of CortexApiInputType
message CortexModelPreprocessor {
  oneof preprocessor {
    BrainExpressionProgram transformations = 1;
    CortexModelImagePreprocessor image = 2;
  }
}
// https://telecomstore2.blob.core.windows.net/raw-data/zxcvv.png
// IMPORTANT - verify image first before pre processing
/*
try:
    img.verify()
    print('Valid image')
except Exception:
    print('Invalid image')
 */
message CortexModelImagePreprocessor {
  oneof image_pre_processor {
    BrainImageResizer resizer = 1;
    BrainImageColorConversion color_conversion = 2;
    BrainImageDynamicConversion dynamic_conversion = 3;
    BrainImageCropping cropping = 4;
    BrainImageAdjustment adjustment = 5;
    BrainImageTranspose transpose = 6;
  }
}
message BrainImageResizer {
  oneof resize {
    BrainImageSizeToAbsolute size = 1;
    BrainImageSizeToAspect aspect = 2;
  }
}
message BrainImageSizeToAbsolute {
  // left top corner distance
  uint32 start_x = 1;
  uint32 start_y = 2;

  uint32 width = 3;
  uint32 height = 4;

  uint32 padding = 5;
  bool antialias = 6;
  BrainImageResizeMethod resize_method = 7;
}
enum BrainImageResizeMethod {
    BRAIN_IMAGE_RESIZE_BILINEAR = 0;
    // ... add 5-6 mpre
}
message BrainImageSizeToAspect {
  BrainImageResizeMethod aspect = 1;
  oneof height_width {
    uint32 width = 2;
    uint32 height = 3;
  }
}
enum BrainImageAspectRatio {
  BRAIN_IMAGE_ASPECT_RATIO_10_9 = 0;
  //other ration
}

message BrainImageColorConversion {
  BrainImageColorConversionType type = 1;
}
enum BrainImageColorConversionType {
  BRAIN_IMAGE_COLOR_TYPE_RGB_TO_GRAY_SCALE = 0;
  BRAIN_IMAGE_COLOR_TYPE_GRAY_SCALE_TO_RGB = 1;
  // TODO Ashu - complete other
}

message BrainImageDynamicConversion {
  bool saturate = 1;
  BrainImageDtype dtype = 2;
}
enum BrainImageDtype {
  BRAIN_IMAGE_DTYPE_FLOAT = 0;
  // TODO Ashu complete
}
message BrainImageCropping {
  uint32 x_coordinate = 1;
  uint32 y_coordinate = 2;
  uint32 height = 3;
  uint32 width = 4;
}
message BrainImageAdjustment {
  // TBD
}
message BrainImageTranspose {
  // TBD
}

//// Multi-variate
//message CortexModelMultiVariatePreprocessor {
//  BrainExpressionProgram transformations = 1 ;
//}
////Todo
//message CortexModelTimeSeriesPreprocessor {
//  BrainExpressionProgram transformations = 1 ;
//}
//
////Todo
//message CortexModelTextTweetPreprocessor {
//  BrainExpressionProgram transformations = 1 ;
//}

// The Model signature defines the schema of a model’s inputs and outputs.
// Model inputs and outputs can be either column-based or tensor-based.
message CortexModelSignature {
  // {"/healthcare/patient/attribute/weight": "1", "/healthcare/patient/attribute/age": "0", "/healthcare/patient/feature/sugar_level": "2"}
  map<string, string> input_feature_to_index_mapping = 1;
  repeated string input_schema = 2; // subset of input feature from CortexAPI, derived and transformed features
  // bmi = [weight/height]
  CortexModelPreprocessor model_preprocessors = 3;
  CortexModelPostprocessor model_postprocessors = 4;
  CortexApiOutputSchema output_schema = 5;
}

message CortexModelPostprocessor {
  oneof post_processor {
    BrainImageResizer resizer = 1;
  }
  // BrainExpressionProgram transformations = 2;
}

message CortexModelHyperParameter {
  CortexModelAlgorithm algorithm = 1;
  // SVM
  // CORTEX_MODEL_HYPER_PARAMETERS_SVM_C = 0;
  // CORTEX_MODEL_HYPER_PARAMETERS_SVM_GAMMA = 11;
  // DT
  // CORTEX_MODEL_HYPER_PARAMETERS_DECISION_TREE_DEPTH = 12;
  map<string, string> key_value_schema = 2;
  // key = BrainQuantitySymbolicSchema - ex. Collection :
  // /common/quantity/symbolic/model/svm_hyperparameter [C, GAMMA]
  // value = schema of the value for the key ex. /common/quantity/symbolic/model/svm_hyperparameter/gamma
  // can take values btw 0-1,
  // /common/quantity/symbolic/model/decision_tree_hyperparameter/depth can take between 0-100 etc
}

message CortexModelTag {
  repeated string tags = 1;
}

message CortexModelDeploymentUnit {
  CortexModelVariant model_variant = 1;  //variant name(MODEL_FRAMEWORK_SKLEARN) & variantVersion(0.24.2)
  CortexModelSerializationFormat serialize_format = 2; //lib(MODEL_SERIALIZATION_PICKLE) and version("4.0")
  CortexModelArtifact model_artifact = 3;// Artifact Information
  CortexModelDependencies dependencies = 4;
  CortexModelCompute compute_dependencies = 5;
}

message CortexModelArtifact {
  ArtifactStoreType store_type = 1;
  string uri = 2;
}

enum ArtifactStoreType {
  ARTIFACT_STORE_TYPE_AZURE_BLOB_DEFAULT = 0;
  ARTIFACT_STORE_TYPE_AZURE_BLOB = 1;
  ARTIFACT_STORE_TYPE_S3 = 2;
  ARTIFACT_STORE_TYPE_GCS = 3;
}

message CortexModelVariant {
  CortexModelFramework framework = 1; // "scikit-learn"
  string framework_version = 2; //0.24.2
}

enum CortexModelFramework {
  MODEL_FRAMEWORK_SKLEARN_DEFAULT = 0;
  MODEL_FRAMEWORK_SKLEARN = 1;
  MODEL_FRAMEWORK_TENSORFLOW = 2;
  MODEL_FRAMEWORK_PYTORCH = 3;
  MODEL_FRAMEWORK_MXNET = 4;
  MODEL_FRAMEWORK_CAFFE = 5;
}

message CortexModelSerializationFormat {
  CortexModelSerialization serialization_lib = 1; //pickle
  string serialization_lib_version = 2; //pickle 1.0
}

enum CortexModelSerialization{
  MODEL_SERIALIZATION_PICKLE_DEFAULT = 0;
  MODEL_SERIALIZATION_PICKLE = 1;
  MODEL_SERIALIZATION_JOB_LIB = 2;
  MODEL_SERIALIZATION_H5 = 3;
}
message CortexModelDependencies {
  string name = 1;
  string version = 2;
}

message CortexModelCompute {
  // TODO discuss with team
  oneof compute_type {
    CortexModelCPUCompute cpu = 1;
    CortexModelGPUCompute gpu = 2;
  }
}

message CortexModelCPUCompute {
  CortexCpuType cpu_type = 1;
  int32 no_of_cores = 2;
  float ram = 3;
}

enum CortexGpuType {
  CORTEX_GPU_TYPE_NVIDIA_DEFAULT = 0;
  CORTEX_GPU_TYPE_NVIDIA = 1;
  CORTEX_GPU_TYPE_AMD = 2;
}

enum CortexCpuType {
  CORTEX_CPU_TYPE_INTEL_DEFAULT = 0;
  CORTEX_CPU_TYPE_INTEL = 1;
  CORTEX_CPU_TYPE_AMD = 2;
  CORTEX_CPU_TYPE_M1 = 3;
  CORTEX_CPU_TYPE_M2 = 4;
}


message CortexModelGPUCompute {
  // TODO discuss with team
  CortexGpuType gpu_type = 1;
}

message CortexModelMetrics{
  string key = 1;
  string value = 2;
}

enum CortexModelStatus {
  MODEL_STATUS_PENDING_REGISTRATION = 0;  // Request to register a new model version is pending as server performs background tasks.
  MODEL_STATUS_FAILED_REGISTRATION = 1;   // Request to register a new model version has failed.
  MODEL_STATUS_READY = 2;  // The tag value.
}

enum CortexModelDeploymentStage {
  CORTEX_MODEL_DEPLOYMENT_STAGE_DEVELOPMENT = 0; // still under development
  CORTEX_MODEL_DEPLOYMENT_STAGE_TRUST = 1; // privacy and fairness review pending
  CORTEX_MODEL_DEPLOYMENT_STAGE_BENCHMARKING = 2;  // on benchmark data
  CORTEX_MODEL_DEPLOYMENT_STAGE_CHALLENGER = 3;// partial traffic coming to this
  CORTEX_MODEL_DEPLOYMENT_STAGE_PRODUCTION = 4;// full traffic coming to this
}

// A Specific algorithm used such that it has a unique set of hyper-parameters
enum CortexModelAlgorithm {
  CORTEX_MODEL_ALGORITHM_ML_DECISION_TREE = 0;
  CORTEX_MODEL_ALGORITHM_ML_RANDOM_FORREST = 1;
  CORTEX_MODEL_ALGORITHM_ML_SUPPORT_VECTOR_MACHINES = 2;
}

message BrainExpressionProgram {
  //TODO delete from here
}