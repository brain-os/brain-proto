syntax = "proto3";

package telos.cortex.common;
option java_package = "com.telos.cortex.common";
option java_multiple_files = true;

import "jio/brain/proto/base/token.proto";
import "jio/brain/proto/event/model_input.proto";
import "jio/brain/proto/event/event_common.proto";
import "jio/brain/proto/quantity/quantity.proto";
import "jio/brain/proto/quantity/quantity_atomic.proto";

message CortexApi {
  jio.brain.proto.base.BrainToken api_id = 1; // /inference-api/healthcare/patient/heart/risk-prediction --> 1
  CortexApiSchema api_schema = 2;
}

/*
CortexApiSchema is define by SME
 */
message CortexApiSchema {
  // Allow search, browse, storage directory, string-key creation etc. based onâ€¦
  CortexApiType api_type = 1; // dropdown
  jio.brain.proto.event.BrainRecordKeySchema record = 2; // same as event key schema
  CortexApiInputSchema input_schema = 3 ;
  CortexApiOutputSchema output_schema = 4 ;
}

enum CortexApiType {
  CORTEX_API_TYPE_CLASSIFICATION = 0;
  CORTEX_API_TYPE_CLASSIFICATION_BINARY = 1;
  CORTEX_API_TYPE_CLASSIFICATION_MULTIVARIATE = 2;
  CORTEX_API_TYPE_REGRESSION = 3;
}

/*
CortexRecordKeySchema list the record type on which CortexAPI will work
 */
//message RecordKeySchema {
//  jio.brain.proto.event.BrainEntityStore entity = 1; // cell X customer
//  jio.brain.proto.event.BrainQuantityStore context_store = 2;
//  jio.brain.proto.event.BrainAttributeStore attribute_store = 3;
//  jio.brain.proto.event.BrainEntityPredicateStore predicate_store = 4;
//}

message CortexApiInputSchema {
  CortexApiInputType input_type = 1; // dropdown
  oneof input_schema {
    CortexApiMultivariateInputSchema multivariate_input_schema = 2;
    CortexApiImageInputSchema image_input_schema = 3;
    // add others based on CortexApiInputType
  }
}
message CortexApiInput {
  CortexApiInputType input_type = 1;
  oneof input {
    CortexApiMultivariateInput multivariate = 2;
    CortexApiImageInput image = 3;
  }
}
message CortexApiMultivariateInputSchema {
  repeated jio.brain.proto.base.BrainToken input = 2; // it can be a raw features, attribute, inference, entities and context
  // ex. /healthcare/patient/attribute/age, /healthcare/patient/feature/sugar_level /healthcare/patient/inference/is_diabetic
  // token to key, key to token
}
message CortexApiMultivariateInput {
  // key is feature key, attribute key, entity type, inference type
  map<uint32, jio.brain.proto.quantity.BrainQuantity> parameter_set = 1; // numeric, symbolic, binary
}
message CortexApiImageInputSchema {
  jio.brain.proto.event.BrainImagePayloadType payload_type = 2;
}
message CortexApiImageInput {
  jio.brain.proto.event.BrainPayload payload = 1;
}
message CortexApiOutputSchema {
  CortexApiOutputType output_type = 1;
  oneof output_schema {
    // CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_BINARY
    CortexApiOutputBinaryClassificationSchema binary_classification = 2;
    //CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_MULTI_CLASS
    CortexApiOutputMultiClassClassificationSchema multiclass_classification = 3;
    CortexApiOutputRegressionSchema regression = 4;
    // CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_MULTI_LABEL

    // CORTEX_API_OUTPUT_TYPE_REGRESSION, CORTEX_API_OUTPUT_TYPE_REGRESSION_MSE, CORTEX_API_OUTPUT_TYPE_REGRESSION_SSE, CORTEX_API_OUTPUT_TYPE_REGRESSION_R2
    // CortexRegressionSchema regression_schema = 4;
    // TODO - add other type of output type schema based on each CortexApiInputType
  }
}

/*
"BrainQuantitySymbolicSchema", "BrainQuantitySchema" ==> /common/quantity/numeric/probability
 */
message CortexApiOutputBinaryClassificationSchema {
  //TODO How to save only positive class value
  jio.brain.proto.quantity.BrainQuantitySchema binary = 1; // BrainBinaryQuantitySchema - set of class labels possible
  // /common/quantity/numeric/probability 0-1 // Distribution
  // /common/quantity/symbolic/heart_risk_class [YES, NO, UNKNOWN]
}

message CortexApiOutputMultiClassClassificationSchema {
  jio.brain.proto.quantity.BrainQuantitySchema symbol_set = 1; // BrainSymbolicQuantitySchema set of class labels possible
  // /common/quantity/numeric/probability 0-1 // Distribution
  // /common/quantity/symbolic/heart_risk_class [YES, NO, UNKNOWN]
}

message CortexApiOutput {
  CortexApiOutputType output_type = 1;
  uint32 model_id = 2;
  oneof output {
    CortexApiOutputBinaryClassification binary_classification = 3;
    CortexApiOutputMultiClassClassification multiclass_classification = 4;
    CortexApiOutputRegression regression = 5;
  }
}
message CortexApiOutputBinaryClassification {
  jio.brain.proto.quantity.BrainBinaryQuantity symbol = 1; // jio.brain.proto.quantity.BrainBinaryQuantity
  double probability = 2;
}

message CortexApiOutputMultiClassClassification {
  jio.brain.proto.quantity.BrainQuantity dominant_class = 1; // will always be symbolic
  jio.brain.proto.quantity.BrainQuantity probability_distribution = 2; // BrainDistributionQuantity set of class labels possible and their probabilities
  // /common/quantity/numeric/probability 0-1 // Distribution
  // /common/quantity/symbolic/heart_risk_class [YES, NO, UNKNOWN]
}
message CortexApiOutputRegressionSchema {
  jio.brain.proto.base.BrainToken inference = 2; // /inference/healthcare/heart_risk/probability
  jio.brain.proto.quantity.BrainQuantitySchema regression_value_schema = 1; // QuantityNumericSchema /common/quantity/numeric/score
}
message CortexApiOutputRegression {
  uint32 predicted_variable = 1; // target_variable
  jio.brain.proto.quantity.BrainQuantity regression_value = 2; // QuantityNumeric /common/quantity/numeric/score
}
// TODO:  Include all the input types
enum CortexApiInputType {
  CORTEX_API_INPUT_TYPE_MULTIVARIATE = 0;
  CORTEX_API_INPUT_TYPE_TIME_SERIES = 1;
  CORTEX_API_INPUT_TYPE_TEXT_TWEET = 2;
  CORTEX_API_INPUT_TYPE_TEXT_NEWS = 3;
  CORTEX_API_INPUT_TYPE_IMAGE_NORMAL = 4;
  CORTEX_API_INPUT_TYPE_IMAGE_XRAY_CHEST_FRONT = 5;
  CORTEX_API_INPUT_TYPE_FACE = 6;
  CORTEX_API_INPUT_TYPE_REMOTE_SENSING_HYPER_SPECTRAL = 7;
  CORTEX_API_INPUT_TYPE_VIDEO_NORMAL = 8;
  CORTEX_API_INPUT_TYPE_VIDEO_THERMAL = 9;
}

// TODO: Include all the output types
enum CortexApiOutputType {
  CORTEX_API_OUTPUT_TYPE_PROJECTION_PCA = 0;
  CORTEX_API_OUTPUT_TYPE_PROJECTION_FISHER = 1;
  CORTEX_API_OUTPUT_TYPE_PROJECTION_MDS = 3;
  CORTEX_API_OUTPUT_TYPE_PROJECTION_SOM = 4;
  CORTEX_API_OUTPUT_TYPE_CLUSTERING_PARTITION = 5;
  CORTEX_API_OUTPUT_TYPE_CLUSTERING_SPECTRAL = 6;
  CORTEX_API_OUTPUT_TYPE_CLUSTERING_HIERARCHICAL = 7;
  CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_BINARY = 8;
  CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_MULTI_CLASS = 9;
  CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_MULTI_LABEL = 10;
  CORTEX_API_OUTPUT_TYPE_CLASSIFICATION_EXTREME = 11;
  CORTEX_API_OUTPUT_TYPE_RECOMMENDATION = 12;
  CORTEX_API_OUTPUT_TYPE_FORECASTING = 13;
  CORTEX_API_OUTPUT_TYPE_ANOMALY = 14;
  CORTEX_API_OUTPUT_TYPE_OPTIMIZATION = 15;
  CORTEX_API_OUTPUT_TYPE_REGRESSION = 16;
  CORTEX_API_OUTPUT_TYPE_REGRESSION_MSE = 17;
  CORTEX_API_OUTPUT_TYPE_REGRESSION_SSE = 18;
  CORTEX_API_OUTPUT_TYPE_REGRESSION_R2 = 19;
}