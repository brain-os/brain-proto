syntax = "proto3";

package jio.brain.proto.content;

option java_package = "com.jio.brain.proto.content";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "jio/brain/proto/base/enums.proto";
import "jio/brain/proto/base/token.proto";
import "jio/brain/proto/quantity/quantity_temporal.proto";

message BrainContentSchema {
  BrainContentType content_type = 1;
  oneof content {
    BrainImageContentSchema image = 2;
    BrainVideoContentSchema video = 3;
    BrainAudioContentSchema audio = 4;
    BrainTextContentSchema text = 5;
  }
}
message BrainImageContentSchema {
  BrainContentValueType value_type = 2;
  map<string, string> meta_data = 3; // type =  (x-ray, ct-scan, mri, spectral) , sub type = (knee, shoulder, etc)
}
enum BrainContentType {
  BRAIN_CONTENT_IMAGE_TYPE = 0;
  BRAIN_CONTENT_VIDEO_TYPE = 1;
  BRAIN_CONTENT_AUDIO_TYPE = 2;
  BRAIN_CONTENT_TEXT_TYPE = 3;
}
enum BrainContentValueType {
  BRAIN_CONTENT_URL_TYPE = 0;
  BRAIN_CONTENT_FLOAT32_TENSOR_TYPE = 1;
  BRAIN_CONTENT_FLOAT64_TENSOR_TYPE = 2;
  BRAIN_CONTENT_I32_TENSOR_TYPE = 3;
  BRAIN_CONTENT_BYTES_TYPE = 4;
  BRAIN_CONTENT_STRING_TYPE = 5;
}
message BrainContent {
  string source_uri = 1;
  oneof payload_is_one_of {
    string uri = 2; // can be url or path on hard disk
    Float32Tensor float32_tensor = 3;
    Float64Tensor float64_tensor = 4;
    Int32Tensor int32_tensor = 5;
    Bytes bytes = 6;
    string string_value = 7; // base64 image
  }
}
// A sparse or dense rank-R tensor that stores data as doubles (float64).
message Float32Tensor   {
  // Each value in the vector. If keys is empty, this is treated as a
  // dense vector.
  repeated float values = 1 [packed = true];

  // If key is not empty, the vector is treated as sparse, with
  // each key specifying the location of the value in the sparse vector.
  repeated uint64 keys = 2 [packed = true];

  // An optional shape that allows the vector to represent a matrix.
  // For example, if shape = [ 10, 20 ], floor(keys[i] / 20) gives the row,
  // and keys[i] % 20 gives the column.
  // This also supports n-dimensonal tensors.
  // Note: If the tensor is sparse, you must specify this value.
  repeated uint64 shape = 3 [packed = true];
}

// A sparse or dense rank-R tensor that stores data as doubles (float64).
message Float64Tensor {
  // Each value in the vector. If keys is empty, this is treated as a
  // dense vector.
  repeated double values = 1 [packed = true];

  // If this is not empty, the vector is treated as sparse, with
  // each key specifying the location of the value in the sparse vector.
  repeated uint64 keys = 2 [packed = true];

  // An optional shape that allows the vector to represent a matrix.
  // For example, if shape = [ 10, 20 ], floor(keys[i] / 10) gives the row,
  // and keys[i] % 20 gives the column.
  // This also supports n-dimensonal tensors.
  // Note: If the tensor is sparse, you must specify this value.
  repeated uint64 shape = 3 [packed = true];
}

// A sparse or dense rank-R tensor that stores data as 32-bit ints (int32).
message Int32Tensor {
  // Each value in the vector. If keys is empty, this is treated as a
  // dense vector.
  repeated int32 values = 1 [packed = true];

  // If this is not empty, the vector is treated as sparse with
  // each key specifying the location of the value in the sparse vector.
  repeated uint64 keys = 2 [packed = true];

  // An optional shape that allows the vector to represent a matrix.
  // For Exmple, if shape = [ 10, 20 ], floor(keys[i] / 10) gives the row,
  // and keys[i] % 20 gives the column.
  // This also supports n-dimensonal tensors.
  // Note: If the tensor is sparse, you must specify this value.
  repeated uint64 shape = 3 [packed = true];
}

// Support for storing binary data for parsing in other ways (such as JPEG/etc).
// This is an example of another type of value and may not immediately be supported.
message Bytes {
  repeated bytes value = 1;

  // If the content type of the data is known, stores it.
  // This allows for the possibility of using decoders for common formats
  // in the future.
  optional string content_type = 2;
}

//message Value {
//  oneof value {
//    // The numbering assumes the possible use of:
//    // - float16, float128
//    // - int8, int16, int32
//    Float32Tensor float32_tensor = 2;
//    Float64Tensor float64_tensor = 3;
//    Int32Tensor int32_tensor = 7;
//    Bytes bytes = 9;
//  }
//}

//message Record {
//  // Map from the name of the feature to the value.
//  //
//  // For vectors and libsvm-like datasets,
//  // a single feature with the name `values`
//  // should be specified.
//  map<string, Value> features = 1;
//
//  // An optional set of labels for this record.
//  // Similar to the features field above, the key used for
//  // generic scalar / vector labels should be 'values'.
//  map<string, Value> label = 2;
//
//  // A unique identifier for this record in the dataset.
//  //
//  // Whilst not necessary, this allows better
//  // debugging where there are data issues.
//  //
//  // This is not used by the algorithm directly.
//  optional string uid = 3;
//
//  // Textual metadata describing the record.
//  //
//  // This may include JSON-serialized information
//  // about the source of the record.
//  //
//  // This is not used by the algorithm directly.
//  optional string metadata = 4;
//
//  // An optional serialized JSON object that allows per-record
//  // hyper-parameters/configuration/other information to be set.
//  //
//  // The meaning/interpretation of this field is defined by
//  // the algorithm author and may not be supported.
//  //
//  // This is used to pass additional inference configuration
//  // when batch inference is used (e.g. types of scores to return).
//  optional string configuration = 5;
//}
message BrainVideoContentSchema {
  BrainContentType type = 1;
}
message BrainAudioContentSchema {
  BrainContentType type = 1;
}
message BrainTextContentSchema {
  BrainContentType type = 1;
}