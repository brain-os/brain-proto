syntax = "proto3";

package jio.brain.proto.repository.inference;

option java_package = "com.jio.brain.proto.repository.inference";
option java_multiple_files = true;

import "jio/brain/proto/base/enums.proto";
import "google/protobuf/timestamp.proto";
import "jio/brain/proto/quantity/quantity.proto";
import "jio/brain/proto/event/event.proto";
import "jio/brain/proto/base/status.proto";
import "jio/brain/proto/event/event_common.proto";

message InferenceCommand {
  oneof command_is_one_of {
    InferenceCreateCommand create = 1;
    InferenceUpdateCommand update = 2; // TODO - NOT USED CURRENTLY - In future
    InferenceDeleteCommand delete = 3; // TODO - NOT USED CURRENTLY - In future
  }
}

message InferenceCreateCommand {
  jio.brain.proto.event.BrainEvent brain_inference_event = 1;   // of type Inference_key_value
  string sha256key = 2; //can be removed
  jio.brain.proto.base.BrainStatus brainStatus = 3;
}

message FeatureUpdateEvent {
  uint32 event_schema = 1;
  map<uint32, jio.brain.proto.quantity.BrainQuantity> feature_set = 2;   // of type feature_key_valye
  string sha256key = 3;
  jio.brain.proto.base.BrainStatus brainStatus = 4;
}

/**
  TODO - NOT USED
 */
message InferenceUpdateCommand {
  google.protobuf.Timestamp window_time = 1; // get from brain event meta data
  jio.brain.proto.event.BrainEventKey event_key = 2; // get from brain event
  map<uint32, jio.brain.proto.quantity.BrainQuantity> inference_set = 3;
}

/**
  TODO - NOT USED
 */
message InferenceDeleteCommand {
  jio.brain.proto.event.BrainEventKey event_key = 1;
  repeated uint32 id_set = 2;
}

message InferenceCrudRequest {
  InferenceCommand command = 1;
}
message InferenceCrudResponse {
  jio.brain.proto.base.BrainStatus brainStatus = 1;
}

service InferenceLakeService {
  rpc generateShaKey(InferenceKeyRequest) returns (InferenceKeyResponse);
  rpc key_components(InferenceKeyComponentsRequest) returns (InferenceKeyComponentResponse);
  rpc crudRequest(InferenceCrudRequest) returns (InferenceCrudResponse);
  rpc getLatestInferenceValue(InferenceGetRequest) returns (InferenceGetResponse);
  //rpc getInferenceList(MultipleInferenceGetRequest) returns (MultipleInferenceGetResponse);
}

/*message MultipleInferenceGetRequest {
  string brain_key = 1;
  repeated InferenceRequest inference_request_set = 2;
}

message InferenceRequest {
  uint32 inference_key = 1;
  jio.brain.proto.base.BrainTimeWindowType window_time_type = 2;
  oneof request_type {
    TimeSeriesWindowRequest time_series_window = 3;
    TimeSeriesCountRequest time_series_count = 4;
    TimeSeriesStartWindowRequest time_series_start_window = 5;
  }
  jio.brain.proto.base.BrainGetMultipleInferenceRequestType inference_request_type = 6;
}

message TimeSeriesCountRequest {
  int32 count = 1;
}

message TimeSeriesWindowRequest {
  google.protobuf.Timestamp window_start_time = 1;
  google.protobuf.Timestamp window_end_time = 2;
}

message TimeSeriesStartWindowRequest {
  google.protobuf.Timestamp window_start_time = 1;
}*/

//If no Window Time Consider Latest table
message InferenceGetRequest {
  string brain_key = 1;
  repeated uint32 inference_key = 2;
}

message InferenceValue{
  jio.brain.proto.quantity.BrainQuantity inference_value = 2;
}

//latest only
message InferenceGetResponse {
//    uint32 Inference_set = 1;
    map<uint32,jio.brain.proto.quantity.BrainQuantity> latest_inference_values = 1;
    jio.brain.proto.base.BrainStatus brainStatus = 2;
}

message MultipleInferenceGetResponse {
  repeated InferencesData inference_values = 1;
  jio.brain.proto.base.BrainStatus brainStatus = 2;
}

message InferencesData {
  uint32 inference_key = 1;
  repeated InferenceTimeSeriesValue inference_time_series_values = 2;
}

message InferenceTimeSeriesValue {
  google.protobuf.Timestamp window_time = 1;
  jio.brain.proto.quantity.BrainQuantity inference_value = 2;
}

message InferenceKeyRequest {
  jio.brain.proto.event.BrainEventKey event_key = 1;
}
message InferenceKeyResponse {
  string inference_key = 1;
  jio.brain.proto.base.BrainStatus brainStatus = 2;
}
message InferenceKeyComponentsRequest {
  string brain_sha_key = 1;
}
message InferenceKeyComponentResponse {
  jio.brain.proto.event.BrainEventKey event_key = 1;
  jio.brain.proto.base.BrainStatus brainStatus = 2;
}

message BrainEventKeyShaMapping {
  string sha_key = 1;
  jio.brain.proto.event.BrainEventKey event_key = 2;
}