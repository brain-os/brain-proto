syntax = "proto3";

package jio.brain.proto.event;

option java_package = "com.jio.brain.proto.event";
option java_multiple_files = true;

import "jio/brain/proto/types/collection.proto";
import "jio/brain/proto/quantity/quantity.proto";
import "jio/brain/proto/entity/entity.proto";
import "jio/brain/proto/base/token.proto";


message BrainEntityStore {
  // Key = mid(/m/<vertical>/<domain>/entity/<entity-type>)
  // Value = A Set of entities of key type
  // entities[<entity-type>].elements[<entity-id>] = true
  map<uint32, jio.brain.proto.types.BrainEntitySet> entities = 1;
}

message BrainQuantityStore {
  // key = machine_id for whatever role it is playing
  // Note: This is NOT quantity type but the role_type
  // e.g. context, property,
  // e.g. attribute, attribute_qualifier,
  // e.g. predicate, predicate_qualifier
  map<uint32, jio.brain.proto.quantity.BrainQuantity> value = 1;
}

message BrainEntityStoreSchema {
  // key = mid(/m/<vertical>/<domain>/entity/<entity-type>)
  map<string, jio.brain.proto.entity.BrainEntitySchema> entity = 1;
}

message BrainEventContextSchema {
  jio.brain.proto.base.BrainToken token = 1;
  jio.brain.proto.quantity.BrainQuantitySchema quantity = 2;
  // BrainToken unit = 3;
}

message BrainFunctionParameter {
  jio.brain.proto.quantity.BrainQuantity quantity = 1; // current scope of quantities => symbolic quantity (entity ids, collection item ids), location, temporal, or numeric quantities
}

message BrainRecordKey {
  jio.brain.proto.event.BrainEntityStore entity_store = 1;   //  /telecom/entity/cell
  jio.brain.proto.event.BrainQuantityStore context_store = 2; //  /telecom/context/day_hours/morning
}

message BrainRecordKeySchema {
  jio.brain.proto.event.BrainEntityStoreSchema entity = 1;
  // key = mid(/m/<vertical>/<domain>/<event>/<context>) - // do we need event in definition
  map<string, jio.brain.proto.event.BrainEventContextSchema> context = 2;
}