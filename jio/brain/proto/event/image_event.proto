syntax = "proto3";

package jio.brain.proto.event;

option java_package = "com.jio.brain.proto.event";
option java_multiple_files = true;

import "jio/brain/proto/event/event_common.proto";
import "jio/brain/proto/quantity/quantity.proto";
import "jio/brain/proto/base/token.proto";

message BrainImageEvent {
  BrainRecordKey key = 1;
  string source_uri = 2;
  BrainContent payload = 3;
  string processed_payload = 4; // file path on local disk of pre processed image or persistent volume. Its name will be generated using pre processor and image id
  map<uint32, BrainImageEventParameter> parameter_set = 5; // entity id or properties
}

message BrainImageEventParameter {
  oneof params {
    uint64 entity_id = 1;
    jio.brain.proto.quantity.BrainQuantity quantity = 2;
  }
}

message BrainContent {
  oneof payload_is_one_of {
    string url = 1; // Url of content stored in bucket
    string file_path = 2;
    Bytes bytes = 3;
    string base64 = 4; // base64 image
  }
}

message Bytes {
  repeated bytes value = 1;
  string content_type = 2;
}


message BrainImageEventSchema {
  BrainRecordKeySchema key_schema = 1;
  BrainImagePayloadType payload_type = 2;
  map<string, BrainImageParameterSchema> parameter_set = 3; // key = mid(/m/<vertical>/<domain>/<event>/<property>)
}

message BrainImageParameterSchema {
  oneof params {
    jio.brain.proto.base.BrainToken entity_token = 1;
    jio.brain.proto.quantity.BrainQuantitySchema property = 2;
  }
}

enum BrainImagePayloadType {
  BRAIN_CONTENT_PAYLOAD_TYPE_URL = 0;
  BRAIN_CONTENT_PAYLOAD_TYPE_FILE = 1;
  BRAIN_CONTENT_PAYLOAD_TYPE_BYTES = 2;
  BRAIN_CONTENT_PAYLOAD_TYPE_BASE64 = 3;
}


message BrainImageClassificationEvent {
  uint32 model_id = 1; // identify it is inference of which model
  BrainImageEvent source_event = 2; // input event
  repeated BrainImageLabel image_label_set = 3; // key is class (symbol or entity) and value is probability (between 0 and 1)
}

message BrainImageLabel {
  uint64 brain_id  = 1; // entity id, or symbol id
  uint32 x = 2;
  uint32 y = 3;
  uint32 length = 4;
  uint32 width = 5;
  double probability = 6;
}

message BrainImageClassificationEventSchema {
  BrainImageEventSchema source_event_schema = 1;
  repeated BrainImageLabelSchema image_label_set = 2;
  map<string, string> meta_data = 3; // type =  (x-ray, ct-scan, mri, spectral) , sub type = (knee, shoulder, etc)
}
message BrainImageLabelSchema {
  jio.brain.proto.quantity.BrainQuantitySchema symbolic = 2;    // it should be a new quantity ??
}





// Below id the OLD version. TODO @Rajan please remove if not needed

//
//import "jio/brain/proto/quantity/quantity_atomic.proto";
//
////message BrainImageEvent {
////  oneof image_event_is_one_of {
////      BrainInputImageEvent input_image_event = 1;
////  }
////}
//message BrainImageEventSchema {
//  oneof image_event_is_one_of {
//    BrainInputImageEventSchema input_image_event = 1;
//  }
//}
//message BrainInputImageEvent {
//  jio.brain.proto.event.BrainEventKey key = 1;
//  string source_uri = 2; // can be url or path on hard disk of original image
//  oneof payload_is_one_of {
//    string uri = 3; // can be url or path on hard disk of processed image
//    Bytes bytes = 4;
//    string base64 = 5; // base64 image
//  }
//}
//message Bytes {
//  repeated bytes value = 1;
//  string content_type = 2;
//}
//message BrainInputImageEventSchema {
//  jio.brain.proto.event.BrainEventKeySchema key = 1;
//  BrainImagePayloadType payload_type = 2;
//  map<string, string> meta_data = 3; // type =  (x-ray, ct-scan, mri, spectral) , sub type = (knee, shoulder, etc)
//}
//enum BrainImagePayloadType {
//  BRAIN_IMAGE_PAYLOAD_TYPE_URI = 0;
//  BRAIN_IMAGE_PAYLOAD_TYPE_BYTES = 1;
//  BRAIN_IMAGE_PAYLOAD_TYPE_BASE64 = 2;
//}
//message BrainImageClassificationEvent {
//  jio.brain.proto.event.BrainEventKey key = 1;
//  repeated BrainImageLabel image_label_set = 2; // key is class (symbol or entity) and value is probability (between 0 and 1)
//  string source_uri = 3; // can be url or path on hard disk of original image
//  oneof payload_is_one_of {
//    string uri = 4; // can be url or path on hard disk of processed image
//    Bytes bytes = 5;
//    string base64 = 6; // base64 image
//  }
//}
//message BrainImageLabel {
//  uint64 entity_id  = 1;
//  uint32 x = 2;
//  uint32 y = 3;
//  uint32 length = 4;
//  uint32 width = 5;
//}
//message BrainImageClassificationEventSchema {
//  jio.brain.proto.event.BrainEventKeySchema key = 1;
//  repeated BrainImageLabelSchema image_label_set = 2;
//  BrainImagePayloadType payload_type = 3;
//  map<string, string> meta_data = 4; // type =  (x-ray, ct-scan, mri, spectral) , sub type = (knee, shoulder, etc)
//}
//message BrainImageLabelSchema {
//  jio.brain.proto.quantity.BrainSymbolicQuantitySchema symbolic = 2;
//}