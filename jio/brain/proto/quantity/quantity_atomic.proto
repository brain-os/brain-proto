syntax = "proto3";

package jio.brain.proto.quantity;

option java_package = "com.jio.brain.proto.quantity";
option java_multiple_files = true;

import "jio/brain/proto/base/enums.proto";
import "jio/brain/proto/types/collection.proto";
import "jio/brain/proto/types/vector.proto";
import "jio/brain/proto/types/number.proto";
import "jio/brain/proto/types/symbol.proto";
import "jio/brain/proto/base/token.proto";
enum BrainAtomicQuantityType {
  BRAIN_UNKNOWN_ATOMIC_QUANTITY = 0;
  BRAIN_NUMERIC_ATOMIC_QUANTITY = 1;
  BRAIN_SYMBOLIC_ATOMIC_QUANTITY = 2;
  BRAIN_ORDINAL_ATOMIC_QUANTITY = 3;
  BRAIN_BINNED_ATOMIC_QUANTITY = 4;
  BRAIN_BINARY_ATOMIC_QUANTITY = 5;
}

message BrainAtomicQuantitySchema {
  BrainAtomicQuantityType atomic_type = 1;
  oneof quantity_schema_is_one_of {
    BrainNumericQuantitySchema numeric_schema = 2;
    BrainSymbolicQuantitySchema symbolic_schema = 3;
    BrainOrdinalQuantitySchema ordinal_schema = 4;
    BrainBinnedQuantitySchema binned_schema = 5;
    BrainBinaryQuantitySchema binary_schema = 6;
  }
}

message BrainAtomicQuantity {
  oneof quantity_is_one_of {
    BrainNumericQuantity numeric = 1;
    BrainSymbolicQuantity symbolic = 2;
    BrainOrdinalQuantity ordinal = 3;
    BrainBinnedQuantity binned = 4;
    BrainBinaryQuantity binary = 5;
  }
}
message BrainNumericQuantity {
  jio.brain.proto.types.BrainNumber value = 1;
 //  jio.brain.proto.types.BrainSymbol unit = 2;
}
message BrainNumericQuantitySchema {
  jio.brain.proto.base.BrainNumberType numeric_type = 1;
  jio.brain.proto.types.BrainNumberRange range = 2;
  repeated BrainUnitSchema units = 3;
}

message BrainSymbolicQuantity {
  // Can contain only str or u64 depending upon value of BrainSymbolType
  jio.brain.proto.types.BrainSymbol value = 1;
}
message BrainSymbolicQuantitySchema {
  // Can only have BRAIN_STR_SYMBOL Or BRAIN_I64_SYMBOL but BRAIN_TYPE_SYMBOL_IDX is invalid
  jio.brain.proto.base.BrainSymbolType type = 1;
  // BrainCollectionType == BRAIN_SYMBOL_COLLECTION
  // BrainCollectionType > ItemSet > BrainSymbolSet > BrainStrSet or BrainU64Set depending on above BrainSymbolType
  jio.brain.proto.types.BrainCollectionSchema symbol_collection = 2;
}
message BrainOrdinalQuantity {
  // Can contain only str or u32 depending upon value of BrainSymbolType
  jio.brain.proto.types.BrainSymbol value = 1;
}
message BrainOrdinalQuantitySchema {
  // Can only have BRAIN_STR_SYMBOL Or BRAIN_TYPE_SYMBOL_IDX but BRAIN_I64_SYMBOL is invalid
  jio.brain.proto.base.BrainSymbolType type = 1;
  // BrainCollectionType == BRAIN_ORDINAL_COLLECTION
  // BrainCollectionType > BrainItemSequence > BrainStrVector or BrainU64Vector depending on above BrainSymbolType
  jio.brain.proto.types.BrainCollectionSchema sequence = 2;
}
message BrainBinnedQuantity {
  // Can contain only str or u32 depending upon value of BrainSymbolType
  jio.brain.proto.types.BrainSymbol value = 1;
}
enum BinType {
  BRAIN_TYPE_QUANTITY_ATOMIC_BINNED_UNKNOWN = 0;
  BRAIN_TYPE_QUANTITY_ATOMIC_BINNED_SIZE = 1; // equal-sized-bins
  BRAIN_TYPE_QUANTITY_ATOMIC_BINNED_FREQ = 2; // equal-frequency-bins
  BRAIN_TYPE_QUANTITY_ATOMIC_BINNED_USER = 3;  // user-defined-bin-boundaries
}

message BrainBinnedQuantitySchema {
  jio.brain.proto.base.BrainSymbolType type = 1;
  BinType bin_type = 2;
  BrainNumericQuantitySchema source_numeric_quantity = 3;
  bool open_minimum = 4;  // true[x >= minimum]
  bool open_maximum = 5; // true[x <= maximum]
  // BrainCollectionType == BRAIN_ORDINAL_COLLECTION
  // BrainCollectionType > BrainItemSequence > BrainStrVector
  jio.brain.proto.types.BrainCollectionSchema bin_names = 6;
  oneof bin_is_one_of {
    // equal-sized-bins
    EqualSizeBinnedSchema size = 7;
    // equal-frequency-bins
    EqualFrequencyBinnedSchema frequency = 8;
    // user-defined-bins
    UserDefinedBinnedSchema user = 9;
  }
}
message EqualSizeBinnedSchema {
  jio.brain.proto.types.BrainF64Vector boundaries = 1;
}
message EqualFrequencyBinnedSchema {
  // After computing bin boundaries from a dataset
  jio.brain.proto.types.BrainVector data = 1; // todo
  jio.brain.proto.types.BrainF64Vector boundaries = 2;
}
message UserDefinedBinnedSchema {
  jio.brain.proto.types.BrainF64Vector boundaries = 1;
}

enum BrainBinaryQuantitySchema {
  YES_NO = 0;
  TRUE_FALSE = 1;
  ON_OFF = 2;
  ACTIVE_INACTIVE = 3;
  ONE_ZERO=4;
}

message BrainBinaryQuantity {
  bool value = 1;
}

message BrainUnitSchema {
  jio.brain.proto.base.BrainToken token = 1;
  repeated string aliases =2;
  bool base_unit = 3;
  double multiplier = 4;
  double constant = 5;
}

