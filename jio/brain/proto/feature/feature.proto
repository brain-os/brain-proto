syntax = "proto3";

package jio.brain.proto.feature;

option java_package = "com.jio.brain.proto.feature.schema";
option java_multiple_files = true;

import "jio/brain/proto/base/status.proto";
import "jio/brain/proto/base/enums.proto";
import "jio/brain/proto/base/token.proto";
import "jio/brain/proto/quantity/quantity.proto";
import "jio/brain/proto/quantity/quantity_atomic.proto";
import "jio/brain/proto/event/event.proto";
import "google/protobuf/timestamp.proto";
import "jio/brain/proto/event/event_common.proto";
//import "google/protobuf/any.proto";

// IMPORTANT - Feature lake will extract Features from BrainEvent (BrainKeyValueBrain and BrainTransactionEvent)
// There is mapping needed in feature lake

// hourly throughput of cell - Result of Aggregation DAG - in that case it is numeric quantity
// SPO2 level of blood sugar of patient

// for event this key should not be populated. TODO remove after this discussion if we agreed

message BrainFeature {
  uint32 id = 1; // which feature?
  jio.brain.proto.event.BrainRecordKey record_key = 2; // optional brain id of feature - e.g. "/telecom/feature/call_experience/hourly" <=> 1234, "/healthcare/patient/heart_beat_rate" <=> 5748
  google.protobuf.Timestamp created_time = 3;
  jio.brain.proto.quantity.BrainQuantity quantity = 4;
}

message BrainFeatureSchema {
  jio.brain.proto.base.BrainToken token = 1;
  jio.brain.proto.event.BrainRecordKeySchema record_key = 2;
  oneof feature_is_one_of {
    BrainWindowedFeatureSchema windowed_feature = 3;
    BrainAsyncFeatureSchema async_feature = 4;
  }
}

message BrainWindowedFeatureSchema {
  jio.brain.proto.quantity.BrainNumericQuantitySchema numeric = 1;
 //  jio.brain.proto.base.BrainToken unit = 3; // units are part of definition of quantity schema
  jio.brain.proto.base.BrainTimeWindowType time_window = 2;
}

message BrainAsyncFeatureSchema {
  jio.brain.proto.quantity.BrainAtomicQuantitySchema atomic = 1;
}

message BrainFeatureFamilySchema {
  jio.brain.proto.base.BrainToken token = 1;
  repeated BrainFeatureSchema feature_set = 2;
}


/////////////////////////////// INFERENCE /////////////////////////////////////////////////

message BrainInference {
  uint32 id = 1;    // /telecom/inference/regression/customer/churn_score  , /telecom/inference/classification/crop_id
  uint32 model_id = 2;  // TODO this should come to function config ?? @Rajan
  jio.brain.proto.event.BrainRecordKey record_key = 3; // optional brain id of feature - e.g. "/telecom/feature/call_experience/hourly" <=> 1234, "/healthcare/patient/heart_beat_rate" <=> 5748
  google.protobuf.Timestamp created_time = 4;
  BrainFunctionParameter value = 5; // either entity_id or numeric quantity
}

message BrainFunctionParameter {
  jio.brain.proto.quantity.BrainQuantity quantity = 1; // current scope of quantities => symbolic quantity (entity ids, collection item ids), location, temporal, or numeric quantities
}

message BrainInferenceSchema {
  jio.brain.proto.base.BrainToken token = 1;
  jio.brain.proto.event.BrainRecordKeySchema record_key = 2;
  BrainFunctionParameterSchema value = 3;
}

message BrainFunctionParameterSchema {
  oneof params {
    jio.brain.proto.quantity.BrainQuantitySchema atomic = 1;
    jio.brain.proto.base.BrainToken entity_type = 2;
  }
}

//message BrainMultivariateEvent {
//  BrainRecordKey key = 1; // entity ids and contexts
//  // key is feature key, attribute key, entity type, collection type
//  map<uint32, BrainFunctionParameter> parameter_set = 2; // all BrainModelFeature will have same key
//}
//
//message BrainMultivariateEventSchema {
//    BrainRecordKeySchema key = 1;
//  // map<string, BrainFunctionParameterSchema> feature_set = 2;  // what is key here ?
//  // repeated BrainFunctionParameterSchema features= 2; // OR
//    map<string, bool> feature_set = 3;
//}

/*message BrainMultivariateInferenceEvent {
  oneof inference_is_one_of {
    BrainClassificationEvent classification = 1;
    BrainRegressionEvent regression = 2;
  }
}
message BrainClassificationEvent {
  BrainRecordKey key = 1; // entity ids and contexts
  map<uint64, bool> classification = 2; // key is class (symbol or entity) and value is probability (between 0 and 1)
  map<uint64, double> probabilities = 3;
}
message BrainClassificationEventSchema {
  BrainRecordKeySchema key = 1;
  jio.brain.proto.quantity.BrainSymbolicQuantitySchema symbolic = 2;
}
message BrainRegressionEvent {
  BrainRecordKey key = 1; // entity ids and contexts
  // key - brain feature schema
  map<uint32, jio.brain.proto.quantity.BrainNumericQuantity> inference_set = 2; // multi value regression
}
message BrainRegressionEventSchema {
  repeated BrainFeatureSchema inference_set = 1; // multi value regression
}*/

//message BrainImageEvent {
//  BrainRecordKey key = 1;
//  string source_uri = 2;
//  BrainContent payload = 3;
//  string processed_payload = 4; // file path on local disk of pre processed image or persistent volume. Its name will be generated using pre processor and image id
//  map<uint32, BrainFunctionParameter> parameter_set = 5; // all BrainModelFeature will have same key
//}
//message BrainContent {
//  oneof payload_is_one_of {
//    string url = 1; // Url of content stored in bucket
//    string file_path = 2;
//    Bytes bytes = 3;
//    string base64 = 4; // base64 image
//  }
//}
//message Bytes {
//  repeated bytes value = 1;
//}
//enum BrainContentPayloadType {
//  BRAIN_CONTENT_PAYLOAD_TYPE_URL = 0;
//  BRAIN_CONTENT_PAYLOAD_TYPE_FILE = 1;
//  BRAIN_CONTENT_PAYLOAD_TYPE_BYTES = 2;
//  BRAIN_CONTENT_PAYLOAD_TYPE_BASE64 = 3;
//}
//message BrainImageEventSchema {
//  BrainRecordKeySchema key = 1;
//  BrainContentPayloadType payload_type = 2;
//  map<string, BrainFunctionParameterSchema> feature_set = 3;
//}
//
//message BrainImageClassificationEvent {
//  uint32 model_id = 1; // identify it is inference of which model
//  BrainImageEvent source_event = 2; // input event
//  repeated BrainImageLabel image_label_set = 3; // key is class (symbol or entity) and value is probability (between 0 and 1)
//}
//message BrainImageLabel {
//  uint64 brain_id  = 1; // entity id, or symbol id
//  uint32 x = 2;
//  uint32 y = 3;
//  uint32 length = 4;
//  uint32 width = 5;
//  double probability = 6;
//}
//message BrainImageClassificationEventSchema {
//  BrainImageEventSchema source_event_schema = 1;
//  repeated BrainImageLabelSchema image_label_set = 2;
//  map<string, string> meta_data = 3; // type =  (x-ray, ct-scan, mri, spectral) , sub type = (knee, shoulder, etc)
//}
//message BrainImageLabelSchema {
//  jio.brain.proto.quantity.BrainSymbolicQuantitySchema symbolic = 2;
//}
/*
  TODO : Should below schema should be part of BrainProcessSchema (BrainFunctionSchema new name)????

  Important consideration :
  1. They will be deployed only once rather than others like filters that can be part of multiple dag
  2. Input and Output will always be on one topic
 */
message BrainMachineLearningFunctionSchema {
  jio.brain.proto.base.BrainToken token = 1;
  string input_topic = 2;
  jio.brain.proto.event.BrainEventSchema input_event_schema = 3;
  string output_topic = 4;
  jio.brain.proto.event.BrainEventSchema output_event_schema = 5;
  map<uint32, BrainFunctionParameterSchema> input_spec = 6;       // /retail/sales/hourly key = index of array, value = entity id, attribute, feature or property. How to handle time-series config ?
  map<uint32, BrainFunctionParameterSchema> output_spec = 7;
  oneof deployment_type_is_one_of {
    LocalDeployment local = 8; // MLFlow generated docker image for image classification
    RemoteDeployment remote = 9; // include port
  }
}
message BrainDeepLearningFunctionSchema {
  jio.brain.proto.base.BrainToken token = 1;
  string input_topic = 2;
  jio.brain.proto.event.BrainEventSchema input_event_schema = 3;
  string output_topic = 4;
  jio.brain.proto.event.BrainEventSchema output_event_schema = 5;
  BrainContentPayloadType payload_type = 6;
  map<uint32, BrainFunctionParameterSchema> input_spec = 7;
  map<uint32, BrainFunctionParameterSchema> output_spec = 8;
  oneof deployment_type_is_one_of {
    LocalDeployment local = 9; // MLFlow generated docker image for image classification
    RemoteDeployment remote = 10; // include port
  }
}
enum BrainContentPayloadType{
  BRAIN_CONTENT_PAYLOAD_TYPE_URL = 0;
  BRAIN_CONTENT_PAYLOAD_TYPE_FILE = 1;
  BRAIN_CONTENT_PAYLOAD_TYPE_BYTES = 2;
  BRAIN_CONTENT_PAYLOAD_TYPE_BASE64 = 3;
}

message LocalDeployment {
  string model_docker_image = 1; // MLFlow generated docker image for image classification
  string end_point = 2; // include port
}
message RemoteDeployment {
  string end_point = 1; // include port
}

//
///**
//{  "telecom/feature/call_duration"  : 100 ,
//   "telecom/feature/call_drop" : 4365,
//   "telecom/feature/call_noise" : 834 }
// */
//
//message BrainFeatureFamily {
//  map<uint32, BrainFeatureSet> value = 1;
//}

/*
{ "telecom/feature/call_experience" : {
   "telecom/feature/call_duration"  : 100 ,
   "telecom/feature/call_drop" : 4365,
   "telecom/feature/call_noise" : 834 }
   }
 */

///**
// This BrainFeature proto will be used while saving feature to store and fetching it back.
// */
//message BrainFeature {
//  uint32 feature = 1;
//  string feature_key = 2;
//  google.protobuf.Any feature_value = 3;      // can be of type int, string, map
//}

// Old version
//message BrainFeatureSchema {
//  jio.brain.proto.base.BrainToken feature = 1;
//  jio.brain.proto.base.BrainFeatureType feature_type = 2;
//  jio.brain.proto.base.BrainToken source = 3;       //source name e.g. DAG property or KG attribute
//
//}
// TODO  ************ REMOVE BELOW ***************** TODO
message BrainFeatureSetSchema {
  map<string, BrainFeatureSchema> feature_set = 1; //string --> Key Token to be used
  map<uint32,BrainFeatureFamilySchema>  feature_family_set = 2;
}
message BrainFeatureSet {
  map<uint32, BrainFeature> value = 1;
}
// TODO  ************ REMOVE ABOVE ***************** TODO
//
//message BrainFeatureFamilySchema {
//  jio.brain.proto.base.BrainToken token = 1;   // feature_family_token
//  repeated string features = 2;
//}
////message BrainFeatureFamilySchema {
////  map<string, BrainFeatureSetSchema> value = 1;
////}
//
//message BrainFeatureSchema {
//  jio.brain.proto.base.BrainToken token = 1;
//  jio.brain.proto.quantity.BrainQuantitySchema quantity = 2;
//  //bool is_time_series = 3;
//   jio.brain.proto.base.BrainToken unit = 3;
//  jio.brain.proto.base.BrainTimeWindowType time_window = 4;
//}

service FeatureMetadataService {
  rpc serve(FeatureMetadataRequest) returns (FeatureMetadataResponse) {}
}
message FeatureMetadataRequest {
  uint32 feature_id = 1;
}

message FeatureMetadataResponse {
  jio.brain.proto.base.BrainStatus status = 1;
  repeated uint32 function_set = 2;
}


//message FeatureServiceRepoConfig {
//  repeated input_topics = 1;
//}

//message BrainFeatureSchema {
//  jio.brain.proto.base.BrainToken token = 1;
//   jio.brain.proto.base.BrainToken unit_token = 2;
//  oneof attribute_is_one_of {
//    jio.brain.proto.quantity.BrainQuantitySchema absolute = 3;
//    BrainQualifiedFeatureSchema qualifiers = 4;
//  }
//}
//
//message BrainQualifiedFeatureSchema {
//  jio.brain.proto.quantity.BrainQuantitySchema value = 1;
//  map<string, BrainFeatureQualifierSchema> qualifiers = 2;
//}
//message BrainFeatureQualifierSchema {
//  jio.brain.proto.base.BrainToken token = 1; // contain information about brain entity and attribute
//  jio.brain.proto.quantity.BrainQuantitySchema quantity = 2;
//   jio.brain.proto.base.BrainToken unit = 3;
//}

