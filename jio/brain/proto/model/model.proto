syntax = "proto3";

package jio.brain.proto.model;

import "jio/brain/proto/model/author.proto";
import "jio/brain/proto/model/api.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.jio.brain.proto.model";
option java_outer_classname = "ModelProto";
option java_multiple_files = true;

//               1:1               1:N
// ModelGroup  -----> ModelVariant -----> ModelVersion
//     |
//     +--  Contributed by a Model Author
//     |
//     +--  Implements a specific API

message ModelGroup {
    uint32                                              mg_id                   = 1;
    string                                              mg_id_ext               = 2;        // /.../models/author-id-1/SentimentAnalysis/scikit/132
    jio.brain.proto.model.ModelAuthorIdentity           author_id               = 3;        // The Author of the Model
    jio.brain.proto.model.ApiDefinitionIdentity         api_id                  = 4;        // The API of which this model is a solution of
    string                                              mg_name                 = 5;        // Unique Name within an Author's Implementations of API
    string                                              mg_description          = 6;        // A brief description (possibly containing approach followed)
    ModelVariant                                        variant                 = 7;

    ModelGroupStatus                                    mg_status               = 9;        // Draft | Published | Archived
    google.protobuf.Timestamp                           created_at              = 10;
    google.protobuf.Timestamp                           last_modified_at        = 11;

    enum ModelGroupStatus {
        DRAFT       = 0;
        PUBLISHED   = 1;
        ARCHIVED    = 2;
    }

}



message ModelVariant {
    string                          mv_name                         = 1;    // Not Required if have 1:1 relationship b/w ModelGroup & ModelVariant
    InputTransformation             input_transformation            = 2;    
    OutputTransformation            output_transformation           = 3;
    PricingRange                    pricing_range                   = 4;
    ApiInputOrOutputFieldValue      configurational_parameters      = 5;    // Values of various Configuration Parameters associated with the API Definition
    ModelInformation                model_info                      = 6;    // TODO: Think of a better name
    Preprocessor                    preprocessor                    = 7;
}


message InputTransformation {
    // TODO: Fill this
}


message OutputTransformation {
    // TODO: Fill this
}


message PricingRange {
    float       min_price       = 1;
    float       max_price       = 2;
    Currency    currency        = 3;

    enum Currency {
        INR = 0;
    }
}



message ModelInformation {

    ProgrammingLanguage         prog_language               = 1;    // Programming Language in which this model has been created
    string                      prog_language_version       = 2;
    ModelDependency             framework_used              = 3;
    repeated ModelDependency    other_dependencies          = 4;            

    enum ProgrammingLanguage {
        PYTHON = 0;
    }
}



message ModelDependency {
    string              module_dependency_name      = 1;    
    string              module_dependency_version   = 2;
    PackageManager      module_package_manager      = 3;    // which package manager to use. This would be language specific. For python default will be pip 
    string              module_repo_name            = 4;    // package manager specific. For conda - which channel to use to get this dependency 

    enum PackageManager {
        PY_PIP      = 0;
        PY_CONDA    = 1;
    }
}



message Preprocessor {
    oneof   preprocessor_one_of {
        string                      preprocessor_file_id            = 1;
        PreprocessingFunctions      preprocessor_functions          = 2;
    }
}


message PreprocessingFunctions {
    repeated    PreprocessorFunction    functions       = 1;
}


/**
 * 
 * When Preprocessing Functions are called just before invoking the model
 * the AIX layer creates a "context" having a map of variables (post the
 * transformation via the SDK of the input provided to the SDK by Consumer)
 * The key of the map contains the names specified by the provider in the
 * configuration of the model and the value represents the data provided
 * by the consumer through the SDK. 
 * 
 * For example: 
 *  - Imagine a function called 'capitalize' that takes a string input argument
 *    called 'var1' and returns a capitalized value of the input string and
 *    the original string in a tuple with 0th element with capitalized value
 *    and the 1st element in the tuple with original string
 * 
 *  - When this function is invoked before calling the model, the output parameters
 *    of the function are added to the context and are mapped with names as 
 *    specified in the configuration of the function of the model. 
 * 
 *  - A sample Output configuration for the above function could be
 *    ['capitalized-var', 'original-var'] indicating the 0th element
 *    of the returned tuple will be stored in the context with the name
 *    'capitalized-var' and the 1st element of the returned tuple will 
 *    stored in the context with name 'original-var'. 
 *
 *  - Assume that there is an API named 'foo' that accepts a String input 
 *    called 'bar'. 
 *  - When onboarding a model that implements this API, the provider gives
 *    input configuration that maps the variable bar to a dataframe with 
 *    a variable called 'baz'. 
 * 
 *  - Also during the onboarding the provider selects the function 'capitalize'
 *    as the preprocessing function and maps the input variable 'var1' to 'baz'
 * 
 *  - The configuration of this function will now look something like below
 *     {'function_id':<>, 'function_id_ext': <>, 'function_param_mapping': {'var1': 'baz'}}, 'function_output_mapping': ['my-capitalized-baz'] } 
 *  
 *  - Now if a consumer invokes foo with bar = 'hello'; it will be transformed
 *    to a dataframe with a column called 'baz' with value = 'hello'. 
 *  - The context will therefore have a map 'baz': 'hello' at runtime.
 *  - When invoking 'capitalize' function the value of 'baz' which is equal
 *    to 'hello' will be used to invoke the function and the output (let's assume
 *    'HELLO' will be stored in the context with the name 'my-capitalized-baz') 
 *    which can then be used to pass as input to another function or supplied to
 *    the model.  
 *  
 */
message PreprocessorFunction {
    uint32                  function_id                 = 1;    // unique id of the function
    string                  function_id_ext             = 2;    // human readable unique id of the function
    uint32                  function_version_number     = 3;
    map<string, string>     function_param_mapping      = 4;    // Mapping of the declared function param names Vs context and SDK variable names 
    repeated string         function_output_mapping     = 5;    // Mapping of declared function function output variables Vs context variable names
}

