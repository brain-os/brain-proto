syntax = "proto3";

package jio.brain.proto.base;

import "jio/brain/proto/base/status.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_package = "com.jio.brain.proto.model";
option java_outer_classname = "ModelAuthorProto";
option java_multiple_files = true;



// ----------------------------------------------------------- //
//              API Author Related Messages 
// ----------------------------------------------------------- //

/**
 * This message represents information about a Model's author. Only 
 * those fields are captured here which are relevant for storing 
 * information about the author. More information about the author
 * can be found in external systems based on the external id stored
 * in this message.
 */
message ModelAuthor {
    uint32                      model_author_id             = 1;        // ID used within the system for ModelAuthor (Autogenerated at creation) 
    ModelAuthorDetails          author_details              = 2;
    bool                        enabled                     = 3;        // Disabled user will not be allowed to perform any action in the system
    google.protobuf.Timestamp   created_at                  = 4;        // Represents seconds of UTC time since Unix epoch
}


/**
 * Information about ModelAuthor 
 */
message ModelAuthorDetails {
    string      model_author_id_ext     = 1;        // Unique Human Readable Id for ModelAuthor in some format - /Entity/Person/x/y/z 
    string      email_address           = 2;
    string      first_name              = 3;
    string      last_name               = 4;
}

/**
 * Identity of the author 
 */
message ModelAuthorIdentity {
    oneof id_oneof {
        uint32      model_author_id           = 1;
        string      model_author_id_ext       = 2;
    }
}


message ModelAuthorHolder {
    BrainStatus     status              = 1;
    ModelAuthor     model_author        = 2;
}




// ----------------------------------------------------------- //
//              API Author Service Methods 
// ----------------------------------------------------------- //



service ModelAuthorService {
    /**
     * Create a new ModelAuthor. On success returns details about the newly
     * created ModelAuthor wrapped in a holder. 
     *
     * Possible BrainStatusInstance on Errors
     *  - BRAIN_STATUS_CODE_ALREADY_EXIST, {"model_author_id_ext" : "xxx" }
     *  - BRAIN_STATUS_CODE_EMPTY_DATA,  {"email_address" : "" }
     *  - BRAIN_STATUS_CODE_EMPTY_DATA, {"first_name" : ""}
     */
    rpc createModelAuthor (ModelAuthorDetails) returns (ModelAuthorHolder);



    /**
     * Gets the author details for the supplied ModelAuthor ID
     * 
     * Possible BrainStatusInstance on Errors
     *  - BRAIN_STATUS_CODE_DOES_NOT_EXIST, {"model_author_id" : "xxx", model_author_id_ext: "yyy" }
     */
    rpc getModelAuthor (ModelAuthorIdentity) returns (ModelAuthorHolder);



    /**
     * Enables the ModelAuthor
     *
     * Possible BrainStatusInstance on Errors
     *  - BRAIN_STATUS_CODE_DOES_NOT_EXIST, {"model_author_id" : "xxx", model_author_id_ext: "yyy" }
     *  - BRAIN_STATUS_CODE_OPERATION_NOT_ALLOWED, {"reason": "ModelAuthor already enabled", "model_author_id" : "xxx", model_author_id_ext: "yyy" }
     */
    rpc enableModelAuthor (ModelAuthorIdentity) returns (google.protobuf.BoolValue);



    /**
     * Disable the ModelAuthor
     *
     * Possible BrainStatusInstance on Errors
     *  - BRAIN_STATUS_CODE_DOES_NOT_EXIST, {"model_author_id" : "xxx", model_author_id_ext: "yyy" }
     *  - BRAIN_STATUS_CODE_OPERATION_NOT_ALLOWED, {"reason": "ModelAuthor already Disabled", "model_author_id" : "xxx", model_author_id_ext: "yyy" }
     */
    rpc disableModelAuthor (ModelAuthorIdentity) returns (google.protobuf.BoolValue);


     /**
      * Updates the ModelAuthor Details for the given ModelAuthor External ID. Fields 
      * specified in the given ModelAuthorDetails will be updated for the ModelAuthor
      * with maching api_autho* 
      * Errors
      * 
      * Possible BrainStatusInstance on Errors
      *  - BRAIN_STATUS_CODE_DOES_NOT_EXIST, {"model_author_id" : "xxx", model_author_id_ext: "yyy" }
      */
    rpc updateAuthorDetails (ModelAuthorDetails) returns (ModelAuthorHolder);
}