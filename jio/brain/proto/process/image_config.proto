syntax = "proto3";

package jio.brain.proto.process;

option java_package = "com.jio.brain.proto.process";
option java_multiple_files = true;

import "jio/brain/proto/base/token.proto";

message BrainImageProcessSchema {
  jio.brain.proto.base.BrainToken model_token = 1;
  string model_docker_image = 2; // MLFlow generated docker image for image classification
  uint32 port = 3;
  BrainImagePreprocessorConfig image_pre_processor_config = 4;
  BrainImagePostProcessorConfig post_processor_config = 5;
  string local_path = 6; // path to keep intermediate image data

}
message BrainImagePreprocessorConfig {
  map<uint32, BrainImagePreProcessor> pre_processor_steps = 1; // key is step number, value is non repeatable BrainImagePreProcessor
}
message BrainImagePreProcessorSet {
  repeated BrainImagePreProcessor pre_processor_set = 1;
}

message BrainImagePreProcessor {
  oneof pre_processor {
    BrainImageResizer resizer = 1;
    BrainImageColorConversion color_conversion = 2;
    BrainImageCropping cropping = 3;
    BrainImageAdjustment adjustment = 4;
    BrainImageTranspose transpose = 5;
  }
}

message BrainImageResizer {
  uint32 height = 1;
  uint32 width = 2;
  uint32 padding = 3;
}

message BrainImageColorConversion {
  BrainImageColorConversionType source = 1;
  BrainImageColorConversionType target = 2;
}

enum BrainImageColorConversionType {
  BRAIN_IMAGE_COLOR_TYPE_RGB = 0;
  BRAIN_IMAGE_COLOR_TYPE_GRAY_SCALE = 1;
  BRAIN_IMAGE_COLOR_TYPE_HSV = 2;
  BRAIN_IMAGE_COLOR_TYPE_YIQ = 3;
  BRAIN_IMAGE_COLOR_TYPE_YUV = 4;
}

message BrainImageCropping {
  uint32 x_coordinate = 1;
  uint32 y_coordinate = 2;
  uint32 height = 3;
  uint32 width = 4;
}

message BrainImageAdjustment {

}
message BrainImageTranspose {

}

// https://machinelearningmastery.com/applications-of-deep-learning-for-computer-vision/
message BrainImagePostProcessorConfig {
  oneof post_processor_is_one_of {
      BrainImageClassificationPostProcessorConfig classification_post_processor = 1;
  }
}
/*
Labeling an x-ray as cancer or not (binary classification).
Classifying a handwritten digit (multiclass classification).
Assigning a name to a photograph of a face (multiclass classification).
 */
message BrainImageClassificationPostProcessorConfig {
  string entity_type = 1;
  oneof mapping_is_one_of {
    BrainImageStringToEntityMapping string_mapping = 2;
    BrainImageUint64ToEntityMapping uint64_mapping = 3;
    BrainImageStringToEntityMapping uint32_mapping = 4;
  }
}
message BrainImageStringToEntityMapping {
  map<string , uint64> entity_mapping = 1;
}
message BrainImageUint64ToEntityMapping {
  map<uint64 , uint64> entity_mapping = 1;
}
message BrainImageUint32ToEntityMapping {
  map<uint32 , uint64> entity_mapping = 1;
}