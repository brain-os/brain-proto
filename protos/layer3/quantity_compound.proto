syntax = "proto3";

package com.jio.fabric;

option java_multiple_files = true;

import "layer0/base.proto";
import "layer1/collection.proto";
import "layer1/set.proto";
import "layer2/symbol.proto";
import "layer3/quantity_compound_range.proto";

enum BrainCompoundQuantityType {
  BRAIN_RANGE_COMPOUND_QUANTITY = 0;
  BRAIN_BASKET_COMPOUND_QUANTITY = 1;
  BRAIN_BAG_COMPOUND_QUANTITY = 2;
  BRAIN_DISTRIBUTION_COMPOUND_QUANTITY = 3;
  BRAIN_SERIES_COMPOUND_QUANTITY = 4;
  BRAIN_SEQUENCE_COMPOUND_QUANTITY = 5;
  BRAIN_PERMUTATION_COMPOUND_QUANTITY = 6;
  BRAIN_MULTIVARIATE_COMPOUND_QUANTITY = 7;
}

message BrainCompoundQuantity {
  oneof quantity_compound_is_one_of {
    BrainRangeQuantity range = 1;
    BrainBasketQuantity	basket = 2;
    BrainSequenceQuantity sequence = 3;
    BrainBagQuantity bag = 4;
    //    BrainQuantityCompoundBag 			bag 			= 4;
    //    BrainQuantityCompoundDistribution 	distribution 	= 5;
    //    BrainQuantityCompoundSeries 		series 		= 6;
    //    BrainQuantityCompoundSequence 		sequence 		= 7;
    //    BrainQuantityCompoundPermutation 	permutation 	= 8;
    //    BrainQuantityCompoundMultivariate 	multivariate 	= 9;
  }
}

message BrainCompoundQuantitySchema {
  BrainCompoundQuantityType type = 1;
  oneof quantity_schema_compound_is_one_of {
    BrainRangeQuantitySchema range = 2;
    BrainBasketQuantitySchema basket = 3;
    BrainSequenceQuantitySchema sequence = 4;
    BrainBagQuantitySchema bag = 5;
    //    BrainQuantitySchemaCompoundBag 			bag 			= 4;
    //    BrainQuantitySchemaCompoundDistribution 	distribution 	= 5;
    //    BrainQuantitySchemaCompoundSeries 		series 		= 6;
    //    BrainQuantitySchemaCompoundSequence 		sequence 		= 7;
    //    BrainQuantitySchemaCompoundPermutation 	permutation 	= 8;
    //    BrainQuantitySchemaComboundMultivariate 	multivariate 	= 9;
  }
}

message BrainBasketQuantity {
  // Can contain only BrainStrSet or BrainU64Set depending upon value of BrainSymbolType
  // BrainIdxSet is invalid
  BrainSymbolBasket basket = 1;
}
message BrainBasketQuantitySchema {
  // Can only have BRAIN_STR_SYMBOL Or BRAIN_I64_SYMBOL but BRAIN_TYPE_SYMBOL_IDX is invalid
  BrainSymbolType type = 1;
  // BrainCollectionType == BRAIN_SYMBOL_COLLECTION
  // BrainCollectionType > ItemSet > BrainSymbolSet > BrainStrSet or BrainU64Set depending on above BrainSymbolType
  BrainCollectionSchema symbol_collection = 2;
}

message BrainSequenceQuantity {
  // Can contain only BrainStrVector or BrainU64Vector depending upon value of BrainSymbolType
  // BrainIdxVector is invalid
  BrainSymbolSequence sequence = 1;
}
message BrainSequenceQuantitySchema {
  // Can only have BRAIN_STR_SYMBOL Or BRAIN_I64_SYMBOL but BRAIN_TYPE_SYMBOL_IDX is invalid
  BrainSymbolType type = 1;
  // BrainCollectionType == BRAIN_SYMBOL_COLLECTION
  // BrainCollectionType > ItemSet > BrainSymbolSet > BrainStrSet or BrainU64Set depending on above BrainSymbolType
  BrainCollectionSchema sequence = 2; // use BrainItemSequence
}
message BrainBagQuantity {
    BrainSymbolBag bag = 1;
}
message BrainBagQuantitySchema {
  BrainNumberType numeric_type = 1;
  BrainSymbolType type = 2;
  BrainCollectionSchema basket = 3; // use BrainItemSet
}