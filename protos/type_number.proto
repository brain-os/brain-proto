syntax = "proto3";

package com.jio.fabric;

option java_multiple_files = true;

import  "layer1/brain_set.proto";

enum BrainNumberTypeEnum {
  BRAIN_NUMBER_TYPE_S32 = 0;	// signed integer 32bit
  BRAIN_NUMBER_TYPE_U32 = 1;	// unsigned integer 32bit
  BRAIN_NUMBER_TYPE_F32 = 4;	// signed float 32bit
  BRAIN_NUMBER_TYPE_S64 = 2;	// signed integer 64bit
  BRAIN_NUMBER_TYPE_U64 = 3;	// unsigned integer 64bit
  BRAIN_NUMBER_TYPE_F64 = 5;	// signed double 64bit
}

message BrainNumber {
  oneof number_is_one_of {
    sint32 	s32 	= 1;
    uint32 	u32 	= 2;
    float 	f32 	= 3;
    sint64 	s64 	= 4;
    uint64 	u64 	= 5;
    double 	f64 	= 6;
  }
}

enum BrainNumberRangeTypeEnum {
  BRAIN_NUMBER_RANGE_TYPE_S32 = 0;	// signed integer 32bit
  BRAIN_NUMBER_RANGE_TYPE_U32 = 1;	// unsigned integer 32bit
  BRAIN_NUMBER_RANGE_TYPE_F32 = 4;	// signed float 32bit
  BRAIN_NUMBER_RANGE_TYPE_S64 = 2;	// signed integer 64bit
  BRAIN_NUMBER_RANGE_TYPE_U64 = 3;	// unsigned integer 64bit
  BRAIN_NUMBER_RANGE_TYPE_F64 = 5;	// signed double 64bit
}

message BrainNumberRange {
  BrainNumberRangeTypeEnum type = 1;
  BrainNumber minimum = 2;
  BrainNumber maximum = 3;
  bool include_minimum = 4; // true[x >= minimum], false[x > minimum]
  bool include_maximum = 5; // true[x <= maximum], false[x < maximum]
}
message BrainNumberBasketType {
  oneof number_basket_is_one_of {
    BrainSetTypeS32	s32 = 1;
    BrainSetTypeU32	u32 = 2;
    BrainSetTypeF32	f32 = 3;
    BrainSetTypeS64	s64 = 4;
    BrainSetTypeU32	u64 = 5;
    BrainSetTypeF64	f64 = 6;
  }
}


message BrainNumberBagType {
  oneof number_basket_is_one_of {
    BrainNumberBagTypeInt int = 1;
    BrainNumberBagTypeLng lng = 2;
    // Float and Double are not good keys to count
    // So, BrainFltNumberBag and BrainDblNubmberBag not defined.
  }
}
message BrainNumberBagTypeInt {
  // key type number, value type number
  oneof number_basket_is_one_of {
    BrainNumberBagTypeIntInt int_int = 1;
    BrainNumberBagTypeIntLng int_lng = 2;
    BrainNumberBagTypeIntFlt int_flt = 3;
    BrainNumberBagTypeIntDbl int_dbl = 4;
  }
}
message BrainNumberBagTypeIntInt {
  map<uint32, uint32> element = 1;
}
message BrainNumberBagTypeIntLng {
  map<uint32, uint64> element = 1;
}
message BrainNumberBagTypeIntFlt {
  map<uint32, float> element = 1;
}
message BrainNumberBagTypeIntDbl {
  map<uint32, double> element = 1;
}
message BrainNumberBagTypeLng {
  // key type number, value type number
  oneof number_lng_bag_is_one_of {
    BrainNumberBagTypeLngInt lng_int = 1;
    BrainNumberBagTypeLngLng lng_lng = 2;
    BrainNumberBagTypeLngFlt lng_flt = 3;
    BrainNumberBagTypeLngDbl lng_dbl = 4;
  }
}
message BrainNumberBagTypeLngInt {
  map<uint64, uint32> element = 1;
}
message BrainNumberBagTypeLngLng {
  map<uint64, uint64> element = 1;
}
message BrainNumberBagTypeLngFlt {
  map<uint64, float> element = 1;
}
message BrainNumberBagTypeLngDbl {
  map<uint64, double> element = 1;
}
message BrainNumberSeriesType{
  uint32 length = 1;	// if present, the Series has to be this size.
  oneof number_Series_is_one_of {
    BrainNumberSeriesTypeInt int = 2;
    BrainNumberSeriesTypeLng lng = 3;
    BrainNumberSeriesTypeFlt flt = 4;
    BrainNumberSeriesTypeDbl dbl = 5;
  }
}
message BrainNumberSeriesTypeInt {
  repeated uint32 element = 1;
}
message BrainNumberSeriesTypeLng {
  repeated uint64 element = 1;
}
message BrainNumberSeriesTypeFlt {
  repeated float element = 1;
}
message BrainNumberSeriesTypeDbl {
  repeated double element = 1;
}
message BrainNumberSparseSeriesType {
  uint32 max_index = 1;
  oneof number_sparse_series_is_one_of {
    BrainNumberSparseSeriesTypeInt int = 2;
    BrainNumberSparseSeriesTypeLng lng = 3;
    BrainNumberSparseSeriesTypeFlt flt = 4;
    BrainNumberSparseSeriesTypeDbl dbl = 5;
  }
}
message BrainNumberSparseSeriesTypeInt {
  map<uint32, int32> element = 1;
}
message BrainNumberSparseSeriesTypeLng {
  map<uint32, int64> element = 1;
}
message BrainNumberSparseSeriesTypeFlt {
  map<uint32, float> element = 1;
}
message BrainNumberSparseSeriesTypeDbl {
  map<uint32, double> element = 1;
}
message BrainNumberTableType {
  uint32 num_rows = 1;
  uint32 num_cols = 2;
  oneof number_table_is_one_of {
    BrainNumberTableTypeInt int = 3;
    BrainNumberTableTypeLng lng = 4;
    BrainNumberTableTypeFlt flt = 5;
    BrainNumberTableTypeDbl dbl = 6;
  }
}
// only one of rows or columns are needed. Other can be deduced.
message BrainNumberTableTypeInt {
  repeated BrainNumberSeriesTypeInt rows = 1;
  repeated BrainNumberSeriesTypeInt cols = 2;
}
message BrainNumberTableTypeLng {
  repeated BrainNumberSeriesTypeLng rows = 1;
  repeated BrainNumberSeriesTypeLng cols = 2;
}
message BrainNumberTableTypeFlt {
  repeated BrainNumberSeriesTypeFlt rows = 1;
  repeated BrainNumberSeriesTypeFlt cols = 2;
}
message BrainNumberTableTypeDbl {
  repeated BrainNumberSeriesTypeDbl rows = 1;
  repeated BrainNumberSeriesTypeDbl cols = 2;
}
// only one of rows or columns are needed. Other can be deduced.
/*
get(i,j) {
   If (!rows(i).hasElement(j)) return 0
   else return rows(i).element(j)
}

 */
message BrainNumberSparseTableType {
  uint32 num_rows = 1;
  uint32 num_cols = 2;
  oneof number_sparse_Series_is_one_of {
    BrainNumberSparseTableTypeInt int = 3;
    BrainNumberSparseTableTypeLng lng = 4;
    BrainNumberSparseTableTypeFlt flt = 5;
    BrainNumberSparseTableTypeDbl dbl = 6;
  }
}
message BrainNumberSparseTableTypeInt {
  repeated BrainNumberSparseSeriesTypeInt rows = 1;
  repeated BrainNumberSparseSeriesTypeInt cols = 2;
}
message BrainNumberSparseTableTypeLng {
  repeated BrainNumberSparseSeriesTypeLng rows = 1;
  repeated BrainNumberSparseSeriesTypeLng cols = 2;
}
message BrainNumberSparseTableTypeFlt {
  repeated BrainNumberSparseSeriesTypeFlt rows = 1;
  repeated BrainNumberSparseSeriesTypeFlt cols = 2;
}
message BrainNumberSparseTableTypeDbl {
  repeated BrainNumberSparseSeriesTypeDbl rows = 1;
  repeated BrainNumberSparseSeriesTypeDbl cols = 2;
}



