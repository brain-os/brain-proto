syntax = "proto3";

package com.jio.brain;

option java_multiple_files = true;

import "index.proto";
import "quantity.proto";
import "schema.proto";
/*
 indexes
 <vertical>/<type>/name
 /telecom/event/lsr
 /telecom/property/lsr/call-duration
 /telecom/context/lsr/time-of-day
 /telecom/entity/customer
 /telecom/attribute/customer/address
 /telecom/attribute-qualifier/customer/address/since
 /telecom/predicate/person/president_of/country
 /telecom/predicate-qualifier/person/president_of/country/period
 */
message Event {
  string event_id = 1;
  uint32 event_type = 2;
  Store key_store = 3;
  Store value_store = 4;
}

message Store {
  // key - entity index in entity dictionary
  map<uint32, EntityStore> entity = 1;
  map<uint32, Quantity> property = 2;
  map<uint32, Quantity> context = 3;
  map<uint32, Quantity> predicate_qualifiers = 6;
}

message EntityStore {
  // key - entity id
  map<string, EntityStoreInstance> entityInstances = 1;
}

message EntityStoreInstance {
  // key - attribute index in attribute dictionary
  map<uint32, AttributeStore> attribute = 2;
}

message AttributeStore {
  Quantity quantity = 1; // attribute value
  // key - attribute-qualifier index in attribute-qualifier dictionary
  map<uint32, Quantity> qualifier = 2;
}

/*
Stored in database
 */
message QuantityConfig {
  string vertical = 1; // telecom
  uint32 index = 2; // range 1,000,000 - 1,999,999
  string key = 3; // THIS WILL BE TYPE - /telecom/quantity/created_date
  string name = 4; // simple name e.g. created_date
  string type = 5; // numeric, symbolic, ordinal, binned, boolean
  string unit = 6; //
  map<string, string> parameters = 7;
  bool is_deleted = 8; // if true, dont load this at startup
}

message PropertyConfig {
  uint32 index = 1;
  // vertical & event name are in event - see below
  string key = 2; // e.g. /retail/property/invoice/invoice_time
  string event_type = 3; // /retail/event/invoice
  string quantity_type = 4; // from quantity dictionary
  bool in_key = 5; // is this property belong to key or value
  bool is_deleted = 6; // if true, dont load this at startup
}

message ContextConfig {
  uint32 index = 1;
  // vertical & event name are in event - see below
  string key = 2; // e.g. /retail/context/invoice/transaction_hours
  string event_type = 3; // /retail/event/invoice
  string quantity_type = 4; // from quantity dictionary
  bool in_key = 5; // is this property belong to key or value
  bool is_deleted = 6; // if true, dont load this at startup
}

message EntityConfig {
  string vertical = 1;
  uint32 index = 2;
  string key = 3;
  string name = 4; // simple name e.g. customer, device, cell
  repeated string attribute = 5; // attribute key in dictionary
  repeated string predicates = 6; // attribute key in dictionary
  bool is_deleted = 7; // if true, dont load this at startup
}

message AttributeConfig {
  uint32 index = 1;
  string key = 2;
  string name = 3; // simple name e.g. age, date_of_birth
  string entity_index = 4;
  string entity_key = 5;
  string quantity_type = 6; // key in quantity dictionary
  repeated string qualifier = 7; // key in attribute qualifier
  bool is_deleted = 8; // if true, dont load this at startup
}

message AttributeQualifierConfig {
  uint32 index = 2;
  string key = 3;
  string name = 4; // simple name e.g. lsr_since - will be used while creating descriptor/key
  string entity_index = 5;
  string entity_key = 6;
  string attribute_index = 7;
  string attribute_key = 8;
  string quantity_type = 9; // key in quantity dictionary since above is date
  // value will always be of same type of attribute quantity type
  map<string, string> parameters = 10;
  bool is_deleted = 11; // if true, dont load this at startup
}

message PredicateConfig {
  string vertical = 1;
  uint32 index = 2;
  string key = 3;
  string source_entity_index = 4;
  string source_entity_key = 5;
  string object_entity_index = 6;
  string object_entity_key = 7;
  repeated string qualifier = 8; // key in predicate qualifier
  bool is_deleted = 9; // if true, dont load this at startup
}

message PredicateQualifierConfig {
  uint32 index = 1;
  string key = 2;
  string name = 3; // simple name e.g. lsr_since - will be used while creating descriptor/key
  string predicate_index = 4;
  string predicate_key = 5;
  string quantity_type = 6; // key in quantity dictionary since above is date
  bool is_deleted = 7; // if true, dont load this at startup
}
/**
  UI will have all required entities while definition. But for configuring - we only need attributes
 */
message EventConfig {
  string vertical = 1;
  uint32 index = 2;
  string key = 3;
  string name = 4; // simple name e.g. lsr - will be used while creating descriptor/key
  repeated string key_entity = 5; // this will asl give me entities involved
  repeated string value_entity = 6;
  repeated string key_property = 9;
  repeated string value_property = 10;
  repeated string key_context = 11;
  repeated string value_context = 12;
  repeated string key_predicate = 13;
  repeated string value_predicate = 14;
  bool is_deleted = 15; // if true, dont load this at startup
}
////////// Dictionary ////////

/*
  Important Notes :
  1. Dictionary of each on component and created during runtime
  2. It will be loaded specific to events
  3. Can merge it into single map
 */
message IndexDictionary {
  map<uint32, QuantityConfig> quantity_config = 1; // 1,000,000 - 1,999,999
  map<uint32, PropertyConfig> property_config = 2; // 2,000,000 - 2,999,999
  map<uint32, ContextConfig> context_config = 3; // 3,000,000 - 3,999,999
  map<uint32, EntityConfig> entity_config = 4; // 4,000,000 - 4,999,999
  map<uint32, AttributeConfig> attribute_config = 5; // 5,000,000 - 5,999,999
  map<uint32, AttributeQualifierConfig> attribute_qualifier_config = 6; // 6,000,000 - 6,999,999
  map<uint32, PredicateConfig> predicate_config = 7; // 7,000,000 - 7,999,999
  map<uint32, PredicateQualifierConfig> predicate_qualifier_config = 8; // 8,000,000 - 8,999,999
  map<uint32, EventConfig> event_config = 9; // // 9,000,000 - 9,999,999
}
message ReverseIndexDictionary {
  map<string, uint32> quantity_config = 1;
  map<string, uint32> property_config = 2;
  map<string, uint32> context_config = 3;
  map<string, uint32> entity_config = 4;
  map<string, uint32> attribute_config = 5;
  map<string, uint32> attribute_qualifier_config = 6;
  map<string, uint32> predicate_config = 7;
  map<string, uint32> predicate_qualifier_config = 8;
  map<string, uint32> event_config = 9;
}
message ProcessDictionary {
  IndexDictionary index = 1;
  ReverseIndexDictionary key = 2;
}
////////// Schemas ///////

