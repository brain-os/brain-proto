syntax = "proto3";

package com.jio.brain;

option java_multiple_files = true;

import "index.proto";
import "quantity.proto";
import "misc.proto";

message BrainQuantitySchemaDictionary {
  string vertical = 1;
  map<string, BrainIndex> meta_data = 2;
  map<string, BrainQuantitySchema> quantity = 3;
  // key = quantity-name
}

message BrainQuantitySchema {
  oneof quantity_schema {
    BrainNumericQuantitySchema numeric = 1;
    BrainSymbolicQuantitySchema symbolic = 2;
    BrainOrdinalQuantitySchema ordinal = 3;
    BrainBinnedQuantitySchema binned = 4;
    BrainSpatialQuantitySchema spatial = 5;
    BrainTemporalQuantitySchema temporal = 6;
  }
}

message BrainNumericQuantitySchema {
  string unit = 1;
  BrainNumericQuantity minimum = 2;
  BrainNumericQuantity maximum = 3;
}

message BrainSymbolicQuantitySchema {
  BrainIndex dictionary = 1;
}

message BrainOrdinalQuantitySchema {
  BrainIndex dictionary = 1;
}

message BrainBinnedQuantitySchema {
  string source = 1;
  BrainIndex dictionary = 2;
  repeated float boundary = 3;
  bool minimum_open = 4;
  bool maximum_open = 5;
}

message BrainSpatialQuantitySchema {
  bool lat_long = 1;
  repeated string location_type = 2;
  // These can only come from locations_types
}

message BrainTemporalQuantitySchema {
  oneof temporal_schema_is_one_of {
    BrainTemporalInstanceQuantitySchema instance = 1; // which
    BrainTemporalDurationQuantitySchema duration = 2; // how man
    BrainTemporalRangeQuantitySchema range = 3;       // from to to
  }
}

message BrainTemporalInstanceQuantitySchema {
  map<string, uint32> selected = 1;
  // These come from the temporal_types above
}

message BrainTemporalDurationQuantitySchema {
  map<string, uint32> selected = 1;
}

message BrainTemporalRangeQuantitySchema {
  map<string, uint32> selected = 1;
  bool include_minimum = 2; // <= vs. <
  bool include_maximum = 3;  //>= vs. >
}

//////////// OLD BELOW ///////////

enum QuantityUnit {
  NOT_APPLICABLE = 0;
  LENGTH_CM = 1;
  LENGTH_METER = 2;
  LENGTH_KM = 3;
  WEIGHT_MG = 4;
  WEIGHT_GRAMS = 5;
  WEIGHT_KG = 6;
  TEMPERATURE_CELSIUS = 7;
  TEMPERATURE_FAHRENHEIT = 8;
  TIME_MILLISECOND = 9;
  TIME_SECOND = 10;
  TIME_YEARS = 11;
  TIME_EPOCH = 12;
  DECIBEL = 13;
  MONETARY_INR = 14;
  PERCENT = 15;
}

// For numeric quantities, we can specify min/max values.
// example: rsrp values are in a certain range
message NumericQuantitySchema {
  QuantityNumeric minimum = 1;
  QuantityNumeric maximum = 2;
  QuantityNumeric value_type = 3; // TODO
}

// Example Brands, Colors, etc.
message SymbolicQuantitySchema {
  Index dictionary = 1;
  repeated Archive archive = 2;
}

// e.g. small, medium, large, etc.
message OrdinalQuantitySchema {
  // name given to bins.
  // In the FabricIndexBuilder we dont sort this by key.
  Index dictionary = 1; // “excellent”, “good”, “bad”
  //  FabricQuantityBins bins = 2;
}

message BinnedQuantitySchema {
  // Which quantity being binned?
  string source_quantity_type = 1; // /fabric/qt/...
  // What names are we giving to each bin?
  Index dictionary = 2;
  // Bin boundaries
  QuantityBins bin = 3;
  // Previous archived values
  repeated Archive archived_dictionary = 4;
  repeated Archive archived_bins = 5;
}

message QuantityBins {
  // Which raw quantity are we binning?
  //  string numeric_quantity_name = 1;
  repeated QuantityNumeric bin_boundary = 1;
  // Below lowest bin_boundary adds another bin before.
  bool below_minimum_valid = 2;
  // Above highest bin_boundary adds another bin after.
  bool above_maximum_valid = 3;
}

message TemporalSchema {
//  uint32 year = 1; // 2021
//  uint32 month = 2; // 1-12
//  uint32 day_of_month = 3; // 1-31
//  uint32 hour_of_day = 4; // 0 - 23
//  uint32 minute = 5; // 0 - 59
//  uint32 second = 6; // 0 - 59
}

message BrainEntitySchema {
  string vertical = 1;
  string entity = 2;
  // key = attribute-name
  map<string, BrainAttributeSchema> attribute = 4;
  // key = predicate-name
  map<string, BrainPredicateSchema> predicate = 5;
}

message BrainAttributeSchema {
  string quantity_type = 4;
  // key = qualifier-name, value = quantity-type
  map<string, string> qualifier = 5;
}

message BrainPredicateSchema {
  string object = 1;
  // key = qualifier-name, value = quantity-type
  map<string, string> qualifier = 5;
}

message BrainEventSchema {
  string topic = 1;
  BrainStoreSchema key_store = 2;
  BrainStoreSchema value_store = 3;
}

message BrainStoreSchema {
  repeated string entity = 1;
  map<string, BrainAttributeSchema> attribute = 4;
  map<string, BrainPredicateSchema> predicate = 5;
  map<string, BrainQuantitySchema> property = 6;
  map<string, BrainQuantitySchema> context = 7;

}

message BrainProcessSchema {

}