syntax = "proto3";

package com.jio.brain;

option java_multiple_files = true;

import "index.proto";
import "quantity.proto";
import "misc.proto";

message BrainQuantitySchema {
  oneof quantity_schema_is_one_of {
    // e.g. count, temperature, volume, area, etc.
    NumericQuantitySchema numeric = 1;
    // e.g. color, texture, fit, style, genre, etc.
    SymbolicQuantitySchema symbolic = 2;
    // e.g. order, size buckets, rating buckets, KPI buckets
    OrdinalQuantitySchema ordinal = 3;
    BinnedQuantitySchema binned = 4;
  }
}

enum QuantityUnit {
  NOT_APPLICABLE = 0;
  LENGTH_CM = 1;
  LENGTH_METER = 2;
  LENGTH_KM = 3;
  WEIGHT_MG = 4;
  WEIGHT_GRAMS = 5;
  WEIGHT_KG = 6;
  TEMPERATURE_CELSIUS = 7;
  TEMPERATURE_FAHRENHEIT = 8;
  TIME_MILLISECOND = 9;
  TIME_SECOND = 10;
}

// For numeric quantities, we can specify min/max values.
// example: rsrp values are in a certain range
message NumericQuantitySchema {
  QuantityNumeric minimum = 1;
  QuantityNumeric maximum = 2;
  QuantityNumeric value_type = 3; // TODO
}

// Example Brands, Colors, etc.
message SymbolicQuantitySchema {
  Index dictionary = 1;
  repeated Archive archive = 2;
}

// e.g. small, medium, large, etc.
message OrdinalQuantitySchema {
  // name given to bins.
  // In the FabricIndexBuilder we dont sort this by key.
  Index dictionary = 1; // “excellent”, “good”, “bad”
  //  FabricQuantityBins bins = 2;
}

message BinnedQuantitySchema {
  // Which quantity being binned?
  string source_quantity_type = 1; // /fabric/qt/...
  // What names are we giving to each bin?
  Index dictionary = 2;
  // Bin boundaries
  QuantityBins bin = 3;
  // Previous archived values
  repeated Archive archived_dictionary = 4;
  repeated Archive archived_bins = 5;
}

message QuantityBins {
  // Which raw quantity are we binning?
  //  string numeric_quantity_name = 1;
  repeated QuantityNumeric bin_boundary = 1;
  // Below lowest bin_boundary adds another bin before.
  bool below_minimum_valid = 2;
  // Above highest bin_boundary adds another bin after.
  bool above_maximum_valid = 3;
}

message BrainEntitySchema {
  string vertical = 1;
  string entity = 2;
  // key = attribute-name
  map<string, BrainAttributeSchema> attribute = 4;
  // key = predicate-name
  map<string, BrainPredicateSchema> predicate = 5;
}

message BrainAttributeSchema {
  string quantity_type = 4;
  // key = qualifier-name, value = quantity-type
  map<string, string> qualifier = 5;
}

message BrainPredicateSchema {
  string object = 1;
  // key = qualifier-name, value = quantity-type
  map<string, string> qualifier = 5;
}

message BrainEventSchema {
  string topic = 1;
  BrainStoreSchema key_store = 2;
  BrainStoreSchema value_store = 3;
}

message BrainStoreSchema {
  repeated string entity = 1;
  map<string, BrainAttributeSchema> attribute = 4;
  map<string, BrainPredicateSchema> predicate = 5;
  map<string, BrainQuantitySchema> property = 6;
  map<string, BrainQuantitySchema> context = 7;

}

message BrainProcessSchema {

}